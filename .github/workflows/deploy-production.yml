name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          NODE_ENV: production
        run: npm run build

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT || 22 }}
          script: |
            set -e
            echo "🚀 Starting deployment to production..."

            cd /var/www/beautycita.com

            # Stash any local changes
            git stash

            # Pull latest code
            git fetch origin main
            git reset --hard origin/main

            # Fix file permissions
            sudo chown -R www-data:www-data /var/www/beautycita.com/backend/src/
            sudo chown -R www-data:www-data /var/www/beautycita.com/backend/migrations/
            sudo chown -R www-data:www-data /var/www/beautycita.com/frontend/src/

            # Install backend dependencies if package.json changed
            if git diff HEAD@{1} HEAD --name-only | grep -q "package.json"; then
              echo "📦 Installing backend dependencies..."
              npm install --production
            fi

            # Install frontend dependencies if package.json changed
            if git diff HEAD@{1} HEAD --name-only | grep -q "frontend/package.json"; then
              echo "📦 Installing frontend dependencies..."
              cd frontend
              npm install --production
              cd ..
            fi

            # Build frontend
            echo "🏗️  Building frontend..."
            cd frontend
            npm run build
            cd ..

            # Run database migrations if any
            if ls backend/migrations/*.sql 1> /dev/null 2>&1; then
              echo "🗄️  Checking for database migrations..."
              # Run migrations (if you have a migration script)
              # PGPASSWORD='${{ secrets.DB_PASSWORD }}' psql -h localhost -U beautycita_app -d beautycita -f backend/migrations/*.sql
            fi

            # Restart backend
            echo "🔄 Restarting backend..."
            sudo -u www-data pm2 restart beautycita-api

            # Wait for service to be healthy
            sleep 5

            # Health check
            echo "🏥 Running health check..."
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://beautycita.com/api/health)

            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "✅ Deployment successful! Service is healthy."
            else
              echo "❌ Health check failed with status: $HEALTH_STATUS"
              sudo -u www-data pm2 logs beautycita-api --lines 50
              exit 1
            fi

            echo "🎉 Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi
