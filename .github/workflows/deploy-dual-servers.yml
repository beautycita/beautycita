name: Deploy to Both Servers

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend
        working-directory: ./frontend
        env:
          NODE_ENV: production
          VITE_API_URL: https://beautycita.com/api
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |
          echo "=== Starting frontend build ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "=== Installed dependencies ==="
          npm list --depth=0 || true
          echo "=== Running build ==="
          npm run build 2>&1 | tee build.log || (echo "BUILD FAILED" && cat build.log && exit 1)

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 1

  deploy-primary:
    name: Deploy to Primary Server (beautycita-main)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/

      - name: Deploy to Primary Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_SSH_PORT || 22 }}
          script: |
            set -e
            echo "üöÄ [PRIMARY] Deploying to beautycita-main..."
            cd /var/www/beautycita.com
            git fetch origin main
            git reset --hard origin/main
            bash FIX_PERMISSIONS.sh || true
            cd frontend && npm run build && cd ..
            sudo -u www-data pm2 restart beautycita-api
            sleep 5
            curl -f https://beautycita.com/api/health || exit 1
            echo "‚úÖ [PRIMARY] Deployment successful!"

      - name: Verify primary deployment
        run: |
          HEALTH=$(curl -s https://beautycita.com/api/health | jq -r '.status')
          if [ "$HEALTH" = "ok" ]; then
            echo "‚úÖ Primary server is healthy"
          else
            echo "‚ùå Primary server health check failed"
            exit 1
          fi

  deploy-secondary:
    name: Deploy to Secondary Server (beautifulsol)
    runs-on: ubuntu-latest
    needs: [build, deploy-primary]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Secondary Server via Tailscale
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT || 22 }}
          script: |
            set -e
            echo "üöÄ [SECONDARY] Deploying to beautifulsol..."
            cd /var/www/beautycita.com
            git fetch origin main
            git reset --hard origin/main
            bash FIX_PERMISSIONS.sh || true
            cd frontend && npm install && npm run build && cd ..
            sudo -u www-data pm2 restart beautycita-api || true
            sleep 5
            echo "‚úÖ [SECONDARY] Deployment successful!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Both servers deployed successfully"
          else
            echo "‚ö†Ô∏è  Secondary server deployment had issues"
          fi
