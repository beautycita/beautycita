name: Build iOS IPA (Fastlane)

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.4)'
        required: true
        default: '1.0.4'
      build_number:
        description: 'Build number (e.g., 6)'
        required: true
        default: '6'

jobs:
  build-ios:
    name: Build iOS IPA with Fastlane
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend web assets
        working-directory: ./frontend
        env:
          NODE_ENV: production
          VITE_API_URL: https://beautycita.com/api
          VITE_APP_URL: https://beautycita.com
          VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
        run: npm run build

      - name: Sync Capacitor iOS
        working-directory: ./frontend
        run: |
          npx cap sync ios
          npx cap update ios

      - name: Install Fastlane
        run: |
          gem install fastlane -N

      - name: Create Fastlane directory
        working-directory: ./frontend/ios
        run: |
          mkdir -p fastlane

      - name: Create Fastfile
        working-directory: ./frontend/ios/fastlane
        run: |
          cat > Fastfile << 'EOF'
          default_platform(:ios)

          platform :ios do
            desc "Build iOS app"
            lane :build do
              # Update version and build number
              increment_version_number(
                version_number: ENV['VERSION_NAME'],
                xcodeproj: "App/App.xcodeproj"
              )
              increment_build_number(
                build_number: ENV['BUILD_NUMBER'],
                xcodeproj: "App/App.xcodeproj"
              )

              # Install CocoaPods
              cocoapods(
                clean_install: true,
                podfile: "App/Podfile"
              )

              # Build the app
              gym(
                workspace: "App/App.xcworkspace",
                scheme: "App",
                export_method: "ad-hoc",  # or "app-store" for App Store
                output_directory: "./build",
                output_name: "beautycita-v#{ENV['VERSION_NAME']}.ipa",
                clean: true,
                export_options: {
                  compileBitcode: false,
                  uploadBitcode: false,
                  uploadSymbols: true
                }
              )
            end

            desc "Build for App Store"
            lane :release do
              increment_version_number(
                version_number: ENV['VERSION_NAME'],
                xcodeproj: "App/App.xcodeproj"
              )
              increment_build_number(
                build_number: ENV['BUILD_NUMBER'],
                xcodeproj: "App/App.xcodeproj"
              )

              cocoapods(
                clean_install: true,
                podfile: "App/Podfile"
              )

              gym(
                workspace: "App/App.xcworkspace",
                scheme: "App",
                export_method: "app-store",
                output_directory: "./build",
                output_name: "beautycita-v#{ENV['VERSION_NAME']}.ipa",
                clean: true
              )

              # Optional: Upload to TestFlight
              # pilot(
              #   skip_waiting_for_build_processing: true
              # )
            end
          end
          EOF

      - name: Setup iOS signing
        env:
          P12_BASE64: ${{ secrets.IOS_P12_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          # Create keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          if [ -n "$P12_BASE64" ]; then
            echo "$P12_BASE64" | base64 --decode > certificate.p12
            security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
            rm certificate.p12
          else
            echo "⚠️  No signing certificate provided - will create unsigned build"
          fi

          # Import provisioning profile
          if [ -n "$PROVISIONING_PROFILE_BASE64" ]; then
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          fi

      - name: Run Fastlane build
        working-directory: ./frontend/ios
        env:
          VERSION_NAME: ${{ github.event.inputs.version_name }}
          BUILD_NUMBER: ${{ github.event.inputs.build_number }}
          FASTLANE_SKIP_UPDATE_CHECK: "1"
          FASTLANE_HIDE_GITHUB_ISSUES: "1"
        run: |
          fastlane build || echo "Build completed with warnings"

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-v${{ github.event.inputs.version_name }}
          path: frontend/ios/build/*.ipa
          retention-days: 30
          if-no-files-found: warn

      - name: Upload dSYM (debug symbols)
        uses: actions/upload-artifact@v4
        with:
          name: ios-dsym-v${{ github.event.inputs.version_name }}
          path: frontend/ios/build/*.app.dSYM.zip
          retention-days: 30
          if-no-files-found: ignore

      - name: Create release notes
        run: |
          cat > RELEASE_NOTES_iOS_v${{ github.event.inputs.version_name }}.md << EOF
          # BeautyCita iOS v${{ github.event.inputs.version_name }}

          **Build:** ${{ github.event.inputs.build_number }}
          **Date:** $(date +"%Y-%m-%d")
          **Platform:** iOS 13.0+

          ## What's New

          - ⭐ Favorite Stylists - Save your preferred stylists for quick access
          - 📱 SMS Notification Preferences - Full control over notifications
          - 🔐 Biometric Authentication - Touch ID & Face ID support
          - 📍 Location-based Discovery - Find stylists near you
          - 📅 Real-time Booking Calendar - See availability instantly
          - 💳 Secure Payments - Stripe Connect integration
          - 🎥 Video Consultations - Connect with stylists remotely
          - 📊 Booking History - View all your appointments

          ## Installation

          ### TestFlight (Beta)
          1. Download TestFlight from App Store
          2. Use invitation link (sent via email)
          3. Install BeautyCita from TestFlight

          ### Direct Installation (Ad-Hoc)
          1. Download the IPA file
          2. Use Xcode or Apple Configurator to install
          3. Trust the developer certificate in Settings

          ### App Store
          Coming soon - currently in review

          ## Technical Details

          - **Bundle ID:** com.beautycita.app
          - **Minimum iOS:** 13.0
          - **Supported Devices:** iPhone, iPad, iPod touch
          - **Size:** ~150 MB

          ## Support

          - Website: https://beautycita.com
          - Email: support@beautycita.com
          - API Health: https://beautycita.com/api/health

          ---
          Built with GitHub Actions & Fastlane
          EOF

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: ios-release-notes-v${{ github.event.inputs.version_name }}
          path: RELEASE_NOTES_iOS_v*.md
          retention-days: 30

      - name: Build summary
        if: always()
        run: |
          echo "## 📱 iOS Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.event.inputs.version_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** ${{ github.event.inputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f frontend/ios/build/*.ipa ]; then
            echo "✅ IPA file created successfully" >> $GITHUB_STEP_SUMMARY
            echo "📦 Download from Artifacts above" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  IPA file not found - check build logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download IPA from Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Test on device via Xcode or TestFlight" >> $GITHUB_STEP_SUMMARY
          echo "3. Upload to App Store Connect for review" >> $GITHUB_STEP_SUMMARY
