import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import {
  CheckCircleIcon,
  XCircleIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline'
import { useAuthStore } from '../../store/authStore'
import axios from 'axios'
import toast from 'react-hot-toast'

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:4000'

interface UsernameSelectorProps {
  onComplete: () => void
}

type UsernameStatus = 'idle' | 'checking' | 'available' | 'taken' | 'invalid'

export default function UsernameSelector({ onComplete }: UsernameSelectorProps) {
  const { user, updateProfile } = useAuthStore()
  const [username, setUsername] = useState(user?.username || '')
  const [originalUsername] = useState(user?.username || '') // Store the original auto-assigned username
  const [usernameStatus, setUsernameStatus] = useState<UsernameStatus>('idle')
  const [saving, setSaving] = useState(false)
  const [checkTimeout, setCheckTimeout] = useState<NodeJS.Timeout | null>(null)

  // Detect if username is auto-generated (matches pattern user_XXXX)
  const isAutoGenerated = (name: string) => /^user_\d+(_\d+)?$/.test(name)

  useEffect(() => {
    // Clear any existing timeout
    if (checkTimeout) {
      clearTimeout(checkTimeout)
    }

    console.log('[DEBUG] Username validation:', {
      username,
      currentUsername: user?.username,
      originalUsername,
      isEmpty: !username,
      isUnchanged: username === originalUsername,
      userObject: user
    })

    // Don't check if empty or hasn't changed from ORIGINAL username
    if (!username || username === originalUsername) {
      console.log('[DEBUG] Skipping - empty or same as original')
      setUsernameStatus('idle')
      return
    }

    // Validate format first
    const isValid = /^[a-zA-Z0-9_]{3,20}$/.test(username)
    console.log('[DEBUG] Format check:', { username, isValid })
    if (!isValid) {
      setUsernameStatus('invalid')
      return
    }

    // Debounce the availability check
    console.log('[DEBUG] Setting timeout for availability check')
    const timeout = setTimeout(() => {
      checkUsernameAvailability(username)
    }, 500)

    setCheckTimeout(timeout)

    return () => {
      if (timeout) clearTimeout(timeout)
    }
  }, [username, user?.username])

  const checkUsernameAvailability = async (usernameToCheck: string) => {
    try {
      console.log('[DEBUG] Checking availability for:', usernameToCheck)
      setUsernameStatus('checking')

      const response = await axios.get(
        `${API_URL}/api/auth/check-username/${encodeURIComponent(usernameToCheck)}`
      )

      console.log('[DEBUG] API response:', response.data)

      if (response.data.available) {
        console.log('[DEBUG] Username is AVAILABLE')
        setUsernameStatus('available')
      } else {
        console.log('[DEBUG] Username is TAKEN')
        setUsernameStatus('taken')
      }
    } catch (error: any) {
      console.error('[DEBUG] Error checking username:', error)
      setUsernameStatus('idle')
    }
  }

  const handleSave = async () => {
    // Prevent double execution
    if (saving) {
      console.log('[USERNAME SELECTOR] Already saving, ignoring duplicate call')
      return
    }

    // Allow saving if username is unchanged from original (just proceeding with auto-assigned)
    // OR if it's available
    if (usernameStatus !== 'available' && username !== originalUsername) {
      if (usernameStatus === 'invalid') {
        toast.error('Username must be 3-20 characters (letters, numbers, underscores only)')
      } else if (usernameStatus === 'taken') {
        toast.error('This username is already taken')
      } else {
        toast.error('Please enter a valid username')
      }
      return
    }

    try {
      setSaving(true)
      console.log('[USERNAME SELECTOR] Saving username:', username)

      const success = await updateProfile({ username })

      if (success) {
        console.log('[USERNAME SELECTOR] ✅ Username saved successfully!')
        toast.success('Username saved! ✨')

        // Don't reset saving state - let parent handle navigation
        console.log('[USERNAME SELECTOR] 🚀 Calling onComplete()')
        onComplete()
        console.log('[USERNAME SELECTOR] ✓ onComplete() executed')
      } else {
        console.log('[USERNAME SELECTOR] ❌ Username save failed')
        toast.error('Failed to save username')
        setSaving(false)
      }
    } catch (error: any) {
      console.error('[USERNAME SELECTOR] Error saving username:', error)
      if (error.response?.data?.message) {
        toast.error(error.response.data.message)
      } else {
        toast.error('Failed to save username')
      }
      setSaving(false)
    }
  }

  const getStatusIcon = () => {
    switch (usernameStatus) {
      case 'checking':
        return (
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <div className="w-5 h-5 border-2 border-purple-600 border-t-transparent rounded-full animate-spin" />
          </div>
        )
      case 'available':
        return (
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <CheckCircleIcon className="w-6 h-6 text-green-500" />
          </div>
        )
      case 'taken':
        return (
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <XCircleIcon className="w-6 h-6 text-red-500" />
          </div>
        )
      case 'invalid':
        return (
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <ExclamationTriangleIcon className="w-6 h-6 text-yellow-500" />
          </div>
        )
      default:
        return null
    }
  }

  const getStatusMessage = () => {
    switch (usernameStatus) {
      case 'checking':
        return <p className="text-sm text-gray-600 mt-2">Checking availability...</p>
      case 'available':
        return <p className="text-sm text-green-600 mt-2">✓ Username available!</p>
      case 'taken':
        return <p className="text-sm text-red-600 mt-2">✗ Username already taken</p>
      case 'invalid':
        return <p className="text-sm text-yellow-600 mt-2">! 3-20 characters (letters, numbers, underscores only)</p>
      default:
        return <p className="text-sm text-gray-500 mt-2">Choose a unique username</p>
    }
  }

  const canSave = usernameStatus === 'available' || (username === originalUsername && username)

  console.log('[DEBUG] Button state:', {
    usernameStatus,
    username,
    originalUsername,
    currentUsername: user?.username,
    canSave,
    condition1: usernameStatus === 'available',
    condition2: username === originalUsername && username
  })

  return (
    <div className="space-y-6 max-w-md mx-auto">
      {/* Show auto-assigned username info if it's the original and auto-generated */}
      {originalUsername && isAutoGenerated(originalUsername) && username === originalUsername && (
        <div className="bg-blue-50 border border-blue-200 rounded-3xl p-4">
          <p className="text-sm text-blue-900 mb-2">
            <span className="font-semibold">Auto-assigned username:</span> <span className="font-mono">@{originalUsername}</span>
          </p>
          <p className="text-xs text-blue-700">
            You can keep this username or customize it below
          </p>
        </div>
      )}

      {/* Username Input */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Choose Your Username
        </label>
        <div className="relative">
          <div className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-400 font-medium">
            @
          </div>
          <input
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value.toLowerCase())}
            placeholder="username"
            className="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-3xl focus:ring-2 focus:ring-purple-500 focus:outline-none"
            maxLength={20}
          />
          {getStatusIcon()}
        </div>
        {getStatusMessage()}
      </div>

      {/* Info Box */}
      <div className="bg-gray-50 border border-gray-200 rounded-3xl p-4">
        <h4 className="font-medium text-gray-900 mb-2">Username Guidelines</h4>
        <ul className="space-y-1 text-sm text-gray-600">
          <li>• 3-20 characters long</li>
          <li>• Only letters, numbers, and underscores</li>
          <li>• Must be unique</li>
          <li>• Will be displayed as @{username || 'username'}</li>
        </ul>
      </div>

      {/* Save Button */}
      <button
        onClick={handleSave}
        disabled={!canSave || saving}
        className="w-full py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-semibold rounded-3xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
      >
        {saving ? (
          <>
            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
            <span>Saving...</span>
          </>
        ) : (
          <>
            <CheckCircleIcon className="w-5 h-5" />
            <span>{username === originalUsername ? 'Continue' : 'Save & Continue'}</span>
</>
        )}
      </button>
    </div>
  )
}
